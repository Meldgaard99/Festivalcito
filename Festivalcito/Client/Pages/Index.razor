@page "/"
@using Festivalcito.Client.Services.ShiftServicesFolder;
@using Festivalcito.Client.Services.ShiftAssignedServicesFolder;
@using Festivalcito.Client.Services.PersonServicesFolder;
@using Festivalcito.Client.Services.AreaServicesFolder;
@using Festivalcito.Shared.Classes;

<h1>Hello, world!</h1>


<div>
    <a href="Registration_LoginPage" class="btn btn-primary" role="button" data-bs-toggle="button">Registration LoginPage</a>
</div>

<div>
    <a href="volunteerPage" class="btn btn-primary" role="button" data-bs-toggle="button">VolunteerPage</a>
</div>

<div>
    <a href="Coordinator_VolunteerPage" class="btn btn-primary" role="button" data-bs-toggle="button">Coordinator_VolunteerPage</a>
</div>

<div>
    <a href="Coordinator_ShiftPage" class="btn btn-primary" role="button" data-bs-toggle="button">Coordinator_ShiftPage</a>
</div>




@code{
    [Inject]
    public IShiftService? ShiftService { get; set; }

    [Inject]
    public IShiftAssignedService? ShiftAssignedService { get; set; }

    [Inject]
    public IPersonService? PersonService { get; set; }

    [Inject]
    public IAreaService? AreaService { get; set; }

    private List<Shift> ShiftsList = new List<Shift>();
    private List<ShiftAssigned> ShiftAssignedList = new List<ShiftAssigned>();
    private List<Person> PersonList = new List<Person>();
    private List<Area> AreaList = new List<Area>();



    protected override async Task OnInitializedAsync(){
    /*
    ShiftsList = (await ShiftService!.ReadAllShifts())!.ToList();

    Console.WriteLine("INdex"+ ShiftsList.Count());
    foreach (Shift shiftX in ShiftsList)
    {
    Console.WriteLine($"{shiftX.Name}, {shiftX.StartTime}");
    }

    Shift x = new Shift();
    x.Name = "HEJ";
    x.StartTime = new DateTime(2022, 12 , 09);
    x.EndTime = x.StartTime = new DateTime(2022, 12, 10);
    x.AgeMin = 18;
    x.IsLocked = false;
    x.RequiredVolunteers = 10;
    x.HourMultiplier = 1.1f;

    await ShiftService!.CreateShift(x);
    x = (await ShiftService.ReadShift(1));
    Console.WriteLine(x.Name);

    x.Name = "Name changed";
    await ShiftService.UpdateShift(x);
    Console.WriteLine((await ShiftService.ReadAllShifts())!.First().Name);

    await ShiftService.DeleteShift(6);


    Person CreatePersonX = new Person();
    CreatePersonX.FirstName = "Bob";
    CreatePersonX.LastName = "Dylan";
    CreatePersonX.Assigned = false;
    CreatePersonX.IsCoordinator = false;
    CreatePersonX.Email = "Bob@mail.com";
    CreatePersonX.DateOfBirth = DateTime.Today;
    CreatePersonX.Address = "Mågevej 2";
    CreatePersonX.PostalCode = "8000";
    CreatePersonX.City = "Alborg";
    CreatePersonX.Country = "France";
    CreatePersonX.DanishLevel = 3;
    CreatePersonX.Gender = "male";
    CreatePersonX.Nationality = "danish";
    CreatePersonX.Address = "Mågevej 2";
    CreatePersonX.MembershipPaid = false;
    await PersonService!.CreatePerson(CreatePersonX);


    PersonList = (await PersonService!.ReadAllPersons())!.ToList();


    Person UpdatePersonX = new Person();
    UpdatePersonX = (await PersonService!.ReadPerson(1));

    Console.WriteLine("Person: " + UpdatePersonX.ToString());

    UpdatePersonX.LastName = "Marly";

    //PersonService!.UpdatePerson(UpdatePersonX);

    await PersonService.DeletePerson(1);



    Area newArea = new Area();
    newArea.AreaName = "FDKLJnadosfgno";
    newArea.AreaID = 1;
    //await AreaService!.CreateArea(newArea);
    //await AreaService!.UpdateArea(newArea);
    await AreaService!.DeleteArea(1);
        */


        ShiftAssigned newShiftAssigned = new ShiftAssigned();
        ShiftAssigned tmpShiftAssigned = new ShiftAssigned();
        newShiftAssigned.ShiftId = 1;
        newShiftAssigned.AssignmentId = 3;
        //await ShiftAssignedService!.CreateShiftAssigned(newShiftAssigned);
        tmpShiftAssigned = await ShiftAssignedService!.ReadShiftAssigned(4);
        Console.WriteLine(tmpShiftAssigned.ShiftAssignedlistId);
        Console.WriteLine(tmpShiftAssigned.ShiftId);
        Console.WriteLine(tmpShiftAssigned.AssignmentId);

        await ShiftAssignedService!.DeleteShiftAssigned(4);
    }

}